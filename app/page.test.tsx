import { render, screen, fireEvent } from '@testing-library/react';
import Page from './page';

//jest mock for supabase generated by generative AI(google Gemini Advanced)
// jest.mock('./supabase', () => ({
//     createClient: () => ({
//         auth: {
//             getSession: jest.fn() 
//         },
//         from: jest.fn().mockReturnThis(),
//         select: jest.fn().mockReturnThis(),
//         storage: { // Mock storage within the mock supabase object
//             getBucket: jest.fn().mockReturnThis(),
//         },
//     }),
// }));

// // Helper function (assuming mockedData and mockedUser are available)
// const withMockedSupabase = (mockedData, mockedUser) => {
//     jest.mocked(supabase.createClient().auth.getSession).mockResolvedValue(mockedUser); 
//     jest.mocked(supabase.createClient().from()).mockResolvedValue({ data: mockedData, error: null });
//     jest.mocked(supabase.createClient().storage.getBucket()).mockResolvedValue({ data: [], error: null });
// };

test('load items', async () => {
    // ... setup with mocked data 
    render(<Page />);

    // ... interaction if needed

    const items = await screen.findAllByTestId("articledisplay")
    
    expect(items).toHaveLength(4)
});
